// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  email       String          @unique
  name        String?
  phoneNumber String?
  createdAt   DateTime        @default(now())
  updateAt    DateTime        @updatedAt
  addresses   Address[]       @relation("UserAddress")
  ratings     ProductRating[]
  cart        Cart?           @relation("UserCart")
  orders      Order[]         @relation("UserOrders")
}

model Order {
  id             String          @id @default(uuid())
  user           User            @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  cartOrder      Json
  shippingInfo   Address         @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId String
  orderAmount    Int
  shippingCost   Int
  totalAmount    Int
  paymentMethod  String
  orderStatus    OrderStatus     @default(PENDING)
  deliveryStatus DeliveryStatus  @default(PENDING)
  deliveryEvents DeliveryEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([deliveryStatus])
}

model DeliveryEvent {
  id        String       @id @default(uuid())
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  dateTime  DateTime     @default(now())
  remark    String
  status    EventStatus?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([orderId])
}

model Cart {
  id           String     @id @default(uuid())
  user         User       @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @unique
  cartItems    CartItem[] @relation("CartCartItem")
  subTotal     Int
  shippingCost Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CartItem {
  id           String   @id @default(uuid())
  total        Int
  unit         Int
  cart         Cart     @relation("CartCartItem", fields: [cartId], references: [id], onDelete: Cascade)
  cartId       String
  product      Product  @relation("ProductCartItem", fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  shippingCost Int      @default(100)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  @@index([cartId])
  @@index([productId])
}

model Address {
  id                    String   @id @default(uuid())
  user                  User     @relation("UserAddress", fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  name                  String
  phoneNumber           String
  additionalPhoneNumber String?
  deliveryAddress       String
  additionalInformation String?
  order                 Order[]
  country               String
  state                 String
  city                  String
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updateAt              DateTime @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String
  image         String
  imageUrls     String[]
  videoUrls     String[]
  price         Int
  previousPrice Int             @default(0)
  isSoldOut     Boolean         @default(false)
  unit          Int
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  subCategoryId String?
  subCategory   SubCategory?    @relation("SubCategoryProducts", fields: [subCategoryId], references: [id])
  ratings       ProductRating[] @relation("ProductProductRatings")
  cartItems     CartItem[]      @relation("ProductCartItem")
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt

  @@index([name])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  products      Product[]
  subCategories SubCategory[] @relation("CategorySubCategories")
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  category   Category  @relation("CategorySubCategories", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  products   Product[] @relation("SubCategoryProducts")
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
}

model ProductRating {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation("ProductProductRatings", fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DeliveryStatus {
  PENDING
  CONFIRMED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

enum EventStatus {
  PAID
  CONFIRMED
  PACKED
  DELIVERED
}
